
# coding: utf-8

# In[16]:



# coding: utf-8

# In[1]:


import os
import pandas as pd
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')

os.chdir('/home/malek/Code/FXSim-Calib-Project/exercises/')
os.listdir()


# In[43]:


rates = pd.read_csv('eurofxref-hist.csv',usecols=['Date','USD','GBP','JPY','CHF','AUD','CAD'])
print(rates.head())
rates.Date = pd.to_datetime(rates.Date)
rates[rates.Date > '2018-01-01'].head()
rates = rates.set_index('Date')


# In[49]:


rates['EUR'] = 1
rates = rates[rates.index < '2016-01-01']
rates = rates[rates.index > '2012-12-31']
rates = rates.div(rates.GBP,axis=0)
rates = rates.drop('GBP',1)


# In[74]:


#we calculate log returns from the past 3 years
logreturns = np.log(rates.EUR) - np.log(rates.shift(-1).EUR)
#the standard deviation of our simulated log returns will be the standard deviations of the historical data
std = logreturns.std()
nsims = 100
sim_dates = pd.bdate_range('2015-12-31','2016-12-31')
import numpy as np

#we generate normal random numbers, which will be the log returns of our simulated prices.
rnds = np.random.normal(0,std,[len(sim_dates),nsims])
rnorm = pd.DataFrame(rnds,columns=range(nsims),index=sim_dates)


# In[87]:


sims = pd.DataFrame(columns = range(nsims),index = sim_dates)

#our simulated data will start with the last data point from our historical data
start_date = sims.index[0]
sims.loc[start_date] = rates.EUR[start_date]


# In[88]:


for i in range(1, len(sim_dates)):
    sims.loc[sim_dates[i]] = np.exp(rnorm.loc[sim_dates[i]])*sims.loc[sim_dates[i-1]]

print(sims.head())
get_ipython().run_line_magic('matplotlib', 'inline')
sims.plot(legend = False)


# In[80]:


import pandas as pd

class FXForward: 
    def __init__(self,pay_ccy,rec_ccy,pay_amt,rec_amt,date):
        self.pay_ccy = pay_ccy
        self.rec_ccy = rec_ccy
        self.pay_amt = pay_amt
        self.rec_amt = rec_amt
        self.date = date       

        
    def __repr__(self):
        result = ''
        result += 'pay: '+ self.pay_ccy + ' ' + str(self.pay_amt) + '\n'
        result += 'rec: '+ self.rec_ccy + ' ' + str(self.rec_amt) + '\n'
        result += str(self.date) + '\n'
        return result      
        
    def price(self,exchange_rate):
        #return the value of the trade given the exchange rate on the expiry date
        #the exchange rate should be 'based' in GBP, ie 1.5 if 1.5USD = 1GBP.
        #the price of the trade is the value of what we receive minus the value of what we pay
        if self.pay_ccy == 'EUR':
            return self.rec_amt - self.pay_amt/exchange_rate
        elif self.pay_ccy == 'GBP':
            return self.rec_amt/exchange_rate - self.pay_amt
        
    def price_from_sims(self,sims):
        #takes as input the simulations that we generated yesterday (261x1000 DataFrame) and returns a 261x1000
        #DataFrame of simulated prices.
        #the price of the trade is the value of what we receive minus the value of what we pay
        sim_values = fxforward.price(sims)
        sim_values[sim_values.index > self.date] = 0
        return sim_values
    
    
fxforward = FXForward('EUR','GBP',130,100,pd.to_datetime('2016-08-31'))
fxforward.pay_ccy
prices = fxforward.price_from_sims(sims)
#prices.plot(legend = False)


def ee(prices):
    return prices[prices>0].fillna(0).mean(axis=1)

def pfe(prices,level):
    return prices[prices>0].fillna(0).quantile(level/100.0,axis=1)

def exposure_profile(trades,sims):
    #takes a list of trades and simulated FX rates, and returns the exposure profile generated by valuing
    #the trades with those simulated values
    mtm = pd.DataFrame(0,index=sims.index,columns = sims.columns)
    for trade in trades: 
        mtm = mtm + trade.price_from_sims(sims)
    exposure = mtm[mtm>0].fillna(0)
    return exposure
    
def make_random_trades(num_trades):

    trades = []
    for i in range(num_trades):
        date = np.random.choice(sim_dates)
        amount = np.random.randint(1,1000)*1000
        print(amount)
        pay = np.random.choice(['EUR','GBP'])
        rec = 'EUR' if pay == 'GBP' else 'GBP'
        rate = np.random.uniform(1.30,1.40)
        eur_amt = rate*amount
        pay_amt = eur_amt if pay == 'EUR' else amount
        rec_amt = eur_amt if rec == 'EUR' else amount
        trade = FXForward(pay_ccy =pay,rec_ccy=rec,rec_amt = rec_amt,pay_amt=pay_amt,date = date)
        trades.append(trade)
    return trades

np.random.seed(100)
trades = make_random_trades(10)
profile = exposure_profile(trades,sims)
profile.plot()


# In[78]:




